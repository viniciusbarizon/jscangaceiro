{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA,kBAAMA,SAAS,CAAC,UAAD,CAAf;;AAEA;AACA,gBAAIC,aAAa,IAAjB;;AAEA;AACA,gBAAIC,QAAQ,IAAZ;;AAEA;gBACaC,iB,GAAN,MAAMA,iBAAN,CAAwB;AAC3BC,8BAAc;AACV,0BAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;;AAED,uBAAOC,aAAP,GAAuB;AACnB,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,4BAAGR,UAAH,EACI,OAAOO,QAAQP,UAAR,CAAP;;AAEJ,8BAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,oCAAYG,eAAZ,GAA8BC,KAAK;AAC/B;AACAX,8CAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,yBAHD;;AAKAP,oCAAYQ,SAAZ,GAAwBJ,KAAK;AACzB;AACAb,yCAAaa,EAAEE,MAAF,CAASC,MAAtB;;AAEA;AACAf,oCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;;AAEAA,uCAAWC,KAAX,GAAmB,MAAM;AACrB,sCAAM,IAAIG,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;;AAIAG,oCAAQP,UAAR;AACH,yBAZD;;AAcAS,oCAAYU,OAAZ,GAAsBN,KAAK;AACvBO,oCAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACA;AACAd,mCAAOK,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,yBAJD;AAKH,qBA9BM,CAAP;AA+BH;;AAED,uBAAOT,aAAP,CAAqBd,UAArB,EAAiC;AAC7B;AACAD,2BAAOyB,OAAP,CAAeC,SAAS;AACpB,4BAAGzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EACIzB,WAAW4B,iBAAX,CAA6BH,KAA7B;;AAEJzB,mCAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAACK,eAAe,IAAhB,EAApC;AACH,qBALD;AAMH;;AAED,uBAAOC,eAAP,GAAyB;AACrB,wBAAG/B,UAAH,EACIC,QAFiB,CAER;AAChB;AApD0B,a","file":"ConnectionFactory.js","sourcesContent":["const stores = ['tradings'];\n\n// starts without connection.\nlet connection = null;\n\n// variable with the original function.\nlet close = null;\n\n// returns the class.\nexport class ConnectionFactory {\n    constructor() {\n        throw new Error('Não é possível criar instâncias dessa classe');\n    }\n\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n            if(connection)\n                return resolve(connection);\n\n            const openRequest = indexedDB.open('jscangaceiro', 4);\n\n            openRequest.onupgradeneeded = e => {\n                // pass the connection to the method.\n                ConnectionFactory._createStores(e.target.result);\n            };\n\n            openRequest.onsuccess = e => {\n                // pass the result (connection) to the promise! Only will be ran one time.\n                connection = e.target.result;\n\n                // saving the original function.\n                close = connection.close.bind(connection);\n\n                connection.close = () => {\n                    throw new Error('You can not close directly the connection.');\n                };\n\n                resolve(connection);\n            };\n\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n                // pass the error to the promise reject!\n                reject(e.target.error.name);\n            };\n        });\n    }\n\n    static _createStores(connection) {\n        // iterate in the array to build the stores.\n        stores.forEach(store => {\n            if(connection.objectStoreNames.contains(store))\n                connection.deleteObjectStore(store);\n            \n            connection.createObjectStore(store, {autoIncrement: true});\n        });\n    }\n\n    static closeConnection() {\n        if(connection)\n            close(); // calling the original close.\n    }\n}\n"]}