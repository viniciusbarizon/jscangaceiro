{"version":3,"sources":["../../../app-src/domain/trading/TradingDao.js"],"names":["Trading","TradingDao","constructor","connection","_connection","_store","add","trading","Promise","resolve","reject","request","transaction","objectStore","onsuccess","e","onerror","console","log","target","error","listAll","tradings","cursor","openCursor","current","result","value","_date","_quantity","_value","push","continue","clearAll","clear"],"mappings":";;;;;;AAASA,mB,cAAAA,O;;;gBAEIC,U,GAAN,MAAMA,UAAN,CAAiB;AACpBC,4BAAYC,UAAZ,EAAwB;AACpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,UAAd;AACH;;AAEDC,oBAAIC,OAAJ,EAAa;AACT,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,8BAAMC,UAAU,KAAKP,WAAL,CACXQ,WADW,CACC,CAAC,KAAKP,MAAN,CADD,EACgB,WADhB,EAEXQ,WAFW,CAEC,KAAKR,MAFN,EAGXC,GAHW,CAGPC,OAHO,CAAhB;;AAKAI,gCAAQG,SAAR,GAAoBC,KAAKN,SAAzB;AACAE,gCAAQK,OAAR,GAAkBD,KAAK;AACnBE,oCAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAV,mCAAO,yCAAP;AACH,yBAHD;AAIH,qBAXM,CAAP;AAYH;;AAEDW,0BAAU;AACN,2BAAO,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,8BAAMY,WAAW,EAAjB;;AAEA,8BAAMC,SAAS,KAAKnB,WAAL,CACVQ,WADU,CACE,CAAC,KAAKP,MAAN,CADF,EACgB,WADhB,EAEVQ,WAFU,CAEE,KAAKR,MAFP,EAGVmB,UAHU,EAAf;;AAKAD,+BAAOT,SAAP,GAAmBC,KAAK;AACpB,kCAAMU,UAAUV,EAAEI,MAAF,CAASO,MAAzB;;AAEA,gCAAGD,OAAH,EAAY;AACR,sCAAMlB,UAAU,IAAIP,OAAJ,CACZyB,QAAQE,KAAR,CAAcC,KADF,EAEZH,QAAQE,KAAR,CAAcE,SAFF,EAGZJ,QAAQE,KAAR,CAAcG,MAHF,CAAhB;;AAMAR,yCAASS,IAAT,CAAcxB,OAAd;AACAkB,wCAAQO,QAAR;AACH,6BATD,MAUK;AACDvB,wCAAQa,QAAR;AACH;AACJ,yBAhBD;;AAkBAC,+BAAOP,OAAP,GAAiBD,KAAK;AAClBE,oCAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAV,mCAAO,0CAAP;AACH,yBAHD;AAIH,qBA9BM,CAAP;AA+BH;;AAEDuB,2BAAW;AACP,2BAAO,IAAIzB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,8BAAMC,UAAU,KAAKP,WAAL,CACXQ,WADW,CACC,CAAC,KAAKP,MAAN,CADD,EACgB,WADhB,EAEXQ,WAFW,CAEC,KAAKR,MAFN,EAGX6B,KAHW,EAAhB;;AAKAvB,gCAAQG,SAAR,GAAoBC,KAAKN,SAAzB;;AAEAE,gCAAQK,OAAR,GAAkBD,KAAK;AACnBE,oCAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAV,mCAAO,4CAAP;AACH,yBAHD;AAIH,qBAZM,CAAP;AAaH;AArEmB,a","file":"TradingDao.js","sourcesContent":["import { Trading } from './Trading.js';\n\nexport class TradingDao {\n    constructor(connection) {\n        this._connection = connection;\n        this._store = 'tradings';\n    }\n\n    add(trading) {\n        return new Promise((resolve, reject) => {\n            const request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .add(trading);\n\n            request.onsuccess = e => resolve();\n            request.onerror = e => {\n                console.log(e.target.error);\n                reject('It was not possible to save the trading');\n            }\n        });\n    }\n\n    listAll() {\n        return new Promise((resolve, reject) => {\n            const tradings = [];\n\n            const cursor = this._connection\n                .transaction([this._store],'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n\n            cursor.onsuccess = e => {\n                const current = e.target.result;\n\n                if(current) {\n                    const trading = new Trading(\n                        current.value._date,\n                        current.value._quantity,\n                        current.value._value\n                    );\n\n                    tradings.push(trading);\n                    current.continue();\n                }\n                else {\n                    resolve(tradings);\n                }\n            };\n\n            cursor.onerror = e => {\n                console.log(e.target.error);\n                reject('It was not possible to list the tradings');\n            }\n        });\n    }\n\n    clearAll() {\n        return new Promise((resolve, reject) => {\n            const request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .clear();\n\n            request.onsuccess = e => resolve();\n\n            request.onerror = e => {\n                console.log(e.target.error);\n                reject('It was not possible to delete the tradings');\n            };\n        })\n    }\n}"]}