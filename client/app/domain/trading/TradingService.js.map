{"version":3,"sources":["../../../app-src/domain/trading/TradingService.js"],"names":["HttpService","Trading","ApplicationException","TradingService","constructor","_http","getTradingsOfTheWeek","get","then","data","map","object","Date","date","quantity","value","err","getTradingsOfTheLastWeek","getTradingsOfTheWeekBeforeLast","getTradingsFromThePeriod","period","Promise","all","reduce","newArray","item","concat","sort","a","b","getTime","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,uB,sBAAAA,W;;AACAC,mB,cAAAA,O;;AACAC,gC,+BAAAA,oB;;;AAEF,kBAAMC,cAAN,CAAqB;AACxBC,8BAAc;AACV,yBAAKC,KAAL,GAAa,IAAIL,WAAJ,EAAb;AACH;;AAEDM,uCAAuB;AACnB,2BAAO,KAAKD,KAAL,CACFE,GADE,CACE,eADF,EAEFC,IAFE,CAGCC,QAAQA,KAAKC,GAAL,CAASC,UACb,IAAIV,OAAJ,CACI,IAAIW,IAAJ,CAASD,OAAOE,IAAhB,CADJ,EAC2BF,OAAOG,QADlC,EAC4CH,OAAOI,KADnD,CADI,CAHT,EAQCC,OAAO;AACH,8BAAM,IAAId,oBAAJ,CAAyB,sDAAzB,CAAN;AACH,qBAVF,CAAP;AAYH;;AAEDe,2CAA2B;AACvB,2BAAO,KAAKZ,KAAL,CACFE,GADE,CACE,mBADF,EAEFC,IAFE,CAGCC,QAAQA,KAAKC,GAAL,CAASC,UACb,IAAIV,OAAJ,CACI,IAAIW,IAAJ,CAASD,OAAOE,IAAhB,CADJ,EAC2BF,OAAOG,QADlC,EAC4CH,OAAOI,KADnD,CADI,CAHT,EAQCC,OAAO;AACH,8BAAM,IAAId,oBAAJ,CAAyB,mDAAzB,CAAN;AACH,qBAVF,CAAP;AAYH;;AAEDgB,iDAAiC;AAC7B,2BAAO,KAAKb,KAAL,CACFE,GADE,CACE,yBADF,EAEFC,IAFE,CAGCC,QAAQA,KAAKC,GAAL,CAASC,UACb,IAAIV,OAAJ,CACI,IAAIW,IAAJ,CAASD,OAAOE,IAAhB,CADJ,EAC2BF,OAAOG,QADlC,EAC4CH,OAAOI,KADnD,CADI,CAHT,EAQCC,OAAO;AACH,8BAAM,IAAId,oBAAJ,CACF,0DADE,CAAN;AAEH,qBAXF,CAAP;AAaH;;AAEKiB,wCAAN,GAAiC;AAAA;;AAAA;AAC7B,4BAAI;AACA,gCAAIC,SAAS,MAAMC,QAAQC,GAAR,CAAY,CAC3B,MAAKhB,oBAAL,EAD2B,EAE3B,MAAKW,wBAAL,EAF2B,EAG3B,MAAKC,8BAAL,EAH2B,CAAZ,CAAnB;;AAMA,mCAAOE,OACFG,MADE,CACK,UAACC,QAAD,EAAWC,IAAX;AAAA,uCAAoBD,SAASE,MAAT,CAAgBD,IAAhB,CAApB;AAAA,6BADL,EACgD,EADhD,EAEFE,IAFE,CAEG,UAACC,CAAD,EAAIC,CAAJ;AAAA,uCAAUA,EAAEhB,IAAF,CAAOiB,OAAP,KAAmBF,EAAEf,IAAF,CAAOiB,OAAP,EAA7B;AAAA,6BAFH,CAAP;AAGH,yBAVD,CAWA,OAAMd,GAAN,EACA;AACIe,oCAAQC,GAAR,CAAYhB,GAAZ;AACA,kCAAM,IAAId,oBAAJ,CAAyB,gDAAzB,CAAN;AACH;AAhB4B;AAiBhC;AApEuB","file":"TradingService.js","sourcesContent":["import { HttpService } from '../../util/HttpService.js';\nimport { Trading } from './Trading.js';\nimport { ApplicationException } from '../../util/ApplicationException.js';\n\nexport class TradingService {\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    getTradingsOfTheWeek() {\n        return this._http\n            .get('tradings/week')\n            .then(\n                data => data.map(object =>\n                    new Trading(\n                        new Date(object.date), object.quantity, object.value\n                    ))\n                ,\n                err => {\n                    throw new ApplicationException('It is not possible to get the current week tradings.');\n                }\n            );\n    }\n\n    getTradingsOfTheLastWeek() {\n        return this._http\n            .get('tradings/lastWeek')\n            .then(\n                data => data.map(object =>\n                    new Trading(\n                        new Date(object.date), object.quantity, object.value\n                    ))\n                ,\n                err => {\n                    throw new ApplicationException('It is not possible to get the last week tradings.');\n                }\n            );\n    }\n\n    getTradingsOfTheWeekBeforeLast() {\n        return this._http\n            .get('tradings/weekBeforeLast')\n            .then(\n                data => data.map(object =>\n                    new Trading(\n                        new Date(object.date), object.quantity, object.value\n                    ))\n                ,\n                err => {\n                    throw new ApplicationException(\n                        'It is not possible to get the week before last tradings.');\n                }\n            );\n    }\n\n    async getTradingsFromThePeriod() {\n        try {\n            let period = await Promise.all([\n                this.getTradingsOfTheWeek(),\n                this.getTradingsOfTheLastWeek(),\n                this.getTradingsOfTheWeekBeforeLast()\n            ]);\n\n            return period\n                .reduce((newArray, item) => newArray.concat(item), [])\n                .sort((a, b) => b.date.getTime() - a.date.getTime());\n        }\n        catch(err)\n        {\n            console.log(err);\n            throw new ApplicationException('It is not possible to get the period tradings.');\n        }\n    }\n}"]}