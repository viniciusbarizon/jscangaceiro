{"version":3,"sources":["../../../app-src/domain/trading/TradingService.js"],"names":["HttpService","Trading","TradingService","constructor","_http","getTradingsOfTheWeek","get","then","data","map","object","Date","date","quantity","value","err","Error","getTradingsOfTheLastWeek","getTradingsOfTheWeekBeforeLast","getTradingsFromThePeriod","period","Promise","all","reduce","newArray","item","concat","sort","a","b","getTime","console","log"],"mappings":";;;;;;AAASA,uB,sBAAAA,W;;AACAC,mB,cAAAA,O;;;AAEF,kBAAMC,cAAN,CAAqB;AACxBC,8BAAc;AACV,yBAAKC,KAAL,GAAa,IAAIJ,WAAJ,EAAb;AACH;;AAEDK,uCAAuB;AACnB,2BAAO,KAAKD,KAAL,CACFE,GADE,CACE,eADF,EAEFC,IAFE,CAGCC,QAAQA,KAAKC,GAAL,CAASC,UACb,IAAIT,OAAJ,CACI,IAAIU,IAAJ,CAASD,OAAOE,IAAhB,CADJ,EAC2BF,OAAOG,QADlC,EAC4CH,OAAOI,KADnD,CADI,CAHT,EAQCC,OAAO;AACH,8BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH,qBAVF,CAAP;AAYH;;AAEDC,2CAA2B;AACvB,2BAAO,KAAKb,KAAL,CACFE,GADE,CACE,mBADF,EAEFC,IAFE,CAGCC,QAAQA,KAAKC,GAAL,CAASC,UACb,IAAIT,OAAJ,CACI,IAAIU,IAAJ,CAASD,OAAOE,IAAhB,CADJ,EAC2BF,OAAOG,QADlC,EAC4CH,OAAOI,KADnD,CADI,CAHT,EAQCC,OAAO;AACH,8BAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACH,qBAVF,CAAP;AAYH;;AAEDE,iDAAiC;AAC7B,2BAAO,KAAKd,KAAL,CACFE,GADE,CACE,yBADF,EAEFC,IAFE,CAGCC,QAAQA,KAAKC,GAAL,CAASC,UACb,IAAIT,OAAJ,CACI,IAAIU,IAAJ,CAASD,OAAOE,IAAhB,CADJ,EAC2BF,OAAOG,QADlC,EAC4CH,OAAOI,KADnD,CADI,CAHT,EAQCC,OAAO;AACH,8BAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACH,qBAVF,CAAP;AAYH;;AAED,sBAAMG,wBAAN,GAAiC;AAC7B,wBAAI;AACA,4BAAIC,SAAS,MAAMC,QAAQC,GAAR,CAAY,CAC3B,KAAKjB,oBAAL,EAD2B,EAE3B,KAAKY,wBAAL,EAF2B,EAG3B,KAAKC,8BAAL,EAH2B,CAAZ,CAAnB;;AAMA,+BAAOE,OACFG,MADE,CACK,CAACC,QAAD,EAAWC,IAAX,KAAoBD,SAASE,MAAT,CAAgBD,IAAhB,CADzB,EACgD,EADhD,EAEFE,IAFE,CAEG,CAACC,CAAD,EAAIC,CAAJ,KAAUA,EAAEjB,IAAF,CAAOkB,OAAP,KAAmBF,EAAEhB,IAAF,CAAOkB,OAAP,EAFhC,CAAP;AAGH,qBAVD,CAWA,OAAMf,GAAN,EACA;AACIgB,gCAAQC,GAAR,CAAYjB,GAAZ;AACA,8BAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACH;AACJ;AAnEuB","file":"TradingService.js","sourcesContent":["import { HttpService } from '../../util/HttpService.js';\nimport { Trading } from './Trading.js';\n\nexport class TradingService {\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    getTradingsOfTheWeek() {\n        return this._http\n            .get('tradings/week')\n            .then(\n                data => data.map(object =>\n                    new Trading(\n                        new Date(object.date), object.quantity, object.value\n                    ))\n                ,\n                err => {\n                    throw new Error('It is not possible to get the current week tradings.');\n                }\n            );\n    }\n\n    getTradingsOfTheLastWeek() {\n        return this._http\n            .get('tradings/lastWeek')\n            .then(\n                data => data.map(object =>\n                    new Trading(\n                        new Date(object.date), object.quantity, object.value\n                    ))\n                ,\n                err => {\n                    throw new Error('It is not possible to get the last week tradings.');\n                }\n            );\n    }\n\n    getTradingsOfTheWeekBeforeLast() {\n        return this._http\n            .get('tradings/weekBeforeLast')\n            .then(\n                data => data.map(object =>\n                    new Trading(\n                        new Date(object.date), object.quantity, object.value\n                    ))\n                ,\n                err => {\n                    throw new Error('It is not possible to get the week before last tradings.');\n                }\n            );\n    }\n\n    async getTradingsFromThePeriod() {\n        try {\n            let period = await Promise.all([\n                this.getTradingsOfTheWeek(),\n                this.getTradingsOfTheLastWeek(),\n                this.getTradingsOfTheWeekBeforeLast()\n            ]);\n\n            return period\n                .reduce((newArray, item) => newArray.concat(item), [])\n                .sort((a, b) => b.date.getTime() - a.date.getTime());\n        }\n        catch(err)\n        {\n            console.log(err);\n            throw new Error('It is not possible to get the period tradings.');\n        }\n    }\n}"]}