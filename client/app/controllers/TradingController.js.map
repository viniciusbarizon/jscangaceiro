{"version":3,"sources":["../../app-src/controllers/TradingController.js"],"names":["Tradings","TradingService","Trading","TradingsView","MessageView","Message","DateConverter","getTradingDao","Bind","getExceptionMessage","debounce","TradingController","constructor","$","document","querySelector","bind","_inputDate","_inputQuantity","_inputValue","_tradings","_message","_service","_init","dao","tradings","listAll","forEach","add","trading","err","text","event","preventDefault","_create","_cleanForm","value","focus","toDate","parseInt","parseFloat","clear","clearAll","importTradings","getTradingsFromThePeriod","then","filter","toArray","some","newTrading","equals","existingTrading","catch"],"mappings":"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","file":"TradingController.js","sourcesContent":["import { Tradings, TradingService, Trading } from '../domain/index.js';\nimport { TradingsView, MessageView, Message, DateConverter } from '../ui/index.js';\n\n// importing the decorator.\nimport { getTradingDao, Bind, getExceptionMessage, debounce } from '../util/index.js';\n\nexport class TradingController {\n    constructor() {\n        // doing the bind, $ keep document as his context.\n        const $ = document.querySelector.bind(document);\n\n        this._inputDate = $('#date');\n        this._inputQuantity = $('#quantity');\n        this._inputValue = $('#value');\n\n        this._tradings = new Bind(\n            new Tradings(),\n            new TradingsView('#tradings'),\n            'add', 'clear'\n        );\n\n        this._message = new Bind(\n            new Message(),\n            new MessageView('#messageView'),\n            'text'\n        );\n\n        this._service = new TradingService();\n\n        // call the method for initialization.\n        this._init();\n    }\n\n    async _init() {\n        try {\n            const dao = await getTradingDao();\n            const tradings = await dao.listAll();\n            tradings.forEach(trading => this._tradings.add(trading));\n        }\n        catch(err) {\n            // err.message extracts only the exception error message.\n            this._message.text = getExceptionMessage(err);\n        }\n    }\n\n    @debounce()\n    async add( event ) {\n        try {\n            event.preventDefault();\n\n            // trading that we need to include in the Database and in the HTML table.\n            const trading = this._create();\n\n            const dao = await getTradingDao();\n            await dao.add(trading);\n\n            // will try to add in the HTML Table only if it was inserted in the Database.\n            this._tradings.add(trading);\n            this._message.text = 'Trading has been added successfully';\n\n            this._cleanForm();\n        }\n        catch(err) {\n            this._message.text = getExceptionMessage(err);\n        }\n    }\n\n    _cleanForm() {\n        this._inputDate.value = '';\n        this._inputQuantity.value = 1;\n        this._inputValue.value = 0.0;\n\n        this._inputDate.focus();\n    }\n\n    _create() {\n        // returns a new Trading instance.\n        return new Trading(\n            DateConverter.toDate(this._inputDate.value),\n            parseInt(this._inputQuantity.value),\n            parseFloat(this._inputValue.value)\n        );\n    }\n\n    async clear() {\n        try {\n            const dao = await getTradingDao();\n            await dao.clearAll();\n\n            this._tradings.clear();\n            this._message.text = 'Tradings have been cleared successfully.';\n        }\n        catch(err) {\n            this._message.text = getExceptionMessage(err);\n        }\n    }\n\n    @debounce(1500)\n    async importTradings() {\n        this._service\n            .getTradingsFromThePeriod()\n            .then(tradings => {\n                tradings\n                    .filter(newTrading => !this._tradings.toArray().some(existingTrading =>\n                        newTrading.equals(existingTrading)\n                    ))\n                    .forEach(trading => this._tradings.add(trading))\n                this._message.text = 'Tradings have been imported successfully';\n            })\n            .catch(err => this._message.text = err);\n    }\n}"]}