{"version":3,"sources":["../../app-src/controllers/TradingController.js"],"names":["Tradings","TradingsView","Message","MessageView","TradingService","getTradingDao","DateInvalidException","Trading","Bind","DateConverter","TradingController","constructor","$","document","querySelector","bind","_inputDate","_inputQuantity","_inputValue","_tradings","_message","_service","_init","then","dao","listAll","tradings","forEach","trading","add","catch","err","text","event","preventDefault","_create","_cleanForm","console","log","stack","message","value","focus","toDate","parseInt","parseFloat","clear","clearAll","importTradings","getTradingsFromThePeriod","filter","newTrading","toArray","some","existingTrading","equals"],"mappings":"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","file":"TradingController.js","sourcesContent":["import { Tradings } from '../domain/trading/Tradings.js';\nimport { TradingsView } from '../ui/views/TradingsView.js';\nimport { Message } from '../ui/models/Message.js';\nimport { MessageView } from '../ui/views/MessageView.js';\nimport { TradingService } from '../domain/trading/TradingService.js';\nimport { getTradingDao } from '../util/DaoFactory.js';\nimport { DateInvalidException } from '../ui/converters/DateInvalidException.js';\nimport { Trading } from '../domain/trading/Trading.js';\nimport { Bind } from '../util/Bind.js';\nimport { DateConverter } from '../ui/converters/DateConverter.js';\n\nexport class TradingController {\n    constructor() {\n        // doing the bind, $ keep document as his context.\n        const $ = document.querySelector.bind(document);\n\n        this._inputDate = $('#date');\n        this._inputQuantity = $('#quantity');\n        this._inputValue = $('#value');\n\n        this._tradings = new Bind(\n            new Tradings(),\n            new TradingsView('#tradings'),\n            'add', 'clear'\n        );\n\n        this._message = new Bind(\n            new Message(),\n            new MessageView('#messageView'),\n            'text'\n        );\n\n        this._service = new TradingService();\n\n        // call the method for initialization.\n        this._init();\n    }\n\n    _init() {\n        getTradingDao()\n        .then(dao => dao.listAll())\n        .then(tradings =>\n            tradings.forEach(trading =>\n                this._tradings.add(trading)))\n        .catch(err => this._message.text = err);\n    }\n\n    add( event ) {\n        try {\n            event.preventDefault();\n\n            // trading that we need to include in the Database and in the HTML table.\n            const trading = this._create();\n\n            getTradingDao()\n            .then(dao => dao.add(trading))\n            .then(() => {\n                // will try to add in the HTML Table only if it was inserted in the Database.\n                this._tradings.add(trading);\n                this._message.text = 'Trading has been added successfully';\n                this._cleanForm();\n            })\n            .catch(err => this._message.text = err);\n        }\n        catch(err) {\n            console.log(err);\n            console.log(err.stack);\n\n            if(err instanceof DateInvalidException )\n                this._message.text = err.message;\n            else\n                this._message.text = 'An unexpected error happened. Please contact the support.';\n        }\n    }\n\n    _cleanForm() {\n        this._inputDate.value = '';\n        this._inputQuantity.value = 1;\n        this._inputValue.value = 0.0;\n\n        this._inputDate.focus();\n    }\n\n    _create() {\n        // returns a new Trading instance.\n        return new Trading(\n            DateConverter.toDate(this._inputDate.value),\n            parseInt(this._inputQuantity.value),\n            parseFloat(this._inputValue.value)\n        );\n    }\n\n    clear() {\n            getTradingDao()\n            .then(dao => dao.clearAll())\n            .then(() => {\n                this._tradings.clear();\n                this._message.text = 'Tradings have been cleared successfully.';\n            });\n    }\n\n    importTradings() {\n        this._service\n            .getTradingsFromThePeriod()\n            .then(tradings => {\n                tradings\n                    .filter(newTrading => !this._tradings.toArray().some(existingTrading =>\n                        newTrading.equals(existingTrading)\n                    ))\n                    .forEach(trading => this._tradings.add(trading))\n                this._message.text = 'Tradings have been imported successfully';\n            })\n            .catch(err => this._message.text = err);\n    }\n}"]}